import tensorflow as tf
tf.set_random_seed(777)
x1_data = [53., 66., 38., 31., 25., 24., 30]
x2_data = [52., 51., 34., 29., 26., 23., 25]
x3_data = [56., 49., 41., 30., 24., 22., 25]
y_data = [15.7, 12.8, 14.7, 15.1, 16.7, 14.1, 13.3]
x1 = tf.placeholder(tf.float32)
x2 = tf.placeholder(tf.float32)
x3 = tf.placeholder(tf.float32)
y = tf.placeholder(tf.float32)
w1 = tf.Variable(tf.random_normal([1]),name='bitcoin')
w2 = tf.Variable(tf.random_normal([1]),name='ethereum')
w3 = tf.Variable(tf.random_normal([1]),name='ripple')
b = tf.Variable(tf.random_normal([1]),name='bias')
hypothesis = w1*x1 + w2*x2 + w3*x3 + b
print(hypothesis)
cost = tf.reduce_mean(tf.square(hypothesis - y))
optimizer = tf.train.GradientDescentOptimizer(learning_rate=0.00005)
train = optimizer.minimize(cost)
sess = tf.Session()
sess.run(tf.global_variables_initializer())
for step in range(20001):
    cost_val, hy_val, _ = sess.run([cost, hypothesis, train], feed_dict={x1:x1_data, x2: x2_data, x3: x3_data, y: y_data})
    if step %50 == 0:
        print(step, "코스트:", cost_val, "\n예측값:\n", hy_val)
        
import tensorflow as tf
tf.set_random_seed(777)
x_data = [[53., 66., 38., 31., 25., 24., 30],
          [52., 51., 34., 29., 26., 23., 25],
          [56., 49., 41., 30., 24., 22., 25]]
y_data = [[15.7],
          [12.8],
          [14.7]]
X = tf.placeholder(tf.float32, shape=[None,7])
Y = tf.placeholder(tf.float32, shape=[None,1])
W = tf.Variable(tf.random_normal([7,1]), name='weight')
b = tf.Variable(tf.random_normal([1]), name='bias')
hypothesis = tf.matmul(X,W)+b
cost = tf.reduce_mean(tf.square(hypothesis-Y))
optimizer = tf.train.GradientDescentOptimizer(learning_rate=1e-5)
train = optimizer.minimize(cost)
sess = tf.Session()
sess.run(tf.global_variables_initializer())
for step in range(2001):
    cost_val, hy_val, _ = sess.run(
        [cost, hypothesis, train], feed_dict={X: x_data, Y: y_data})
    if step % 10 == 0:
        print(step, "Cost: ", cost_val, "\nPrediction:\n", hy_val)
        
        
import tensorflow as tf
tf.set_random_seed(777)
filename_queue = tf.train.string_input_producer(
    ['data-02-stock_daily.csv'], shuffle=False, name='filename_queue')
reader = tf.TextLineReader()
key, value = reader.read(filename_queue)
record_defaults = [[0.], [0.], [0.], [0.], [0.]]
xy = tf.decode_csv(value, record_defaults=record_defaults)
train_x_batch, train_y_batch = tf.train.batch([xy[0:-1], xy[-1:]], batch_size=10)
X = tf.placeholder(tf.float32, shape=[None, 4])
Y = tf.placeholder(tf.float32, shape=[None, 1])
W = tf.Variable(tf.random_normal([4, 1]), name='weight')
b = tf.Variable(tf.random_normal([1]), name='bias')
hypothesis = tf.matmul(X, W) + b
cost = tf.reduce_mean(tf.square(hypothesis - Y))
optimizer = tf.train.GradientDescentOptimizer(learning_rate=1e-5)
train = optimizer.minimize(cost)
sess = tf.Session()
sess.run(tf.global_variables_initializer())
coord = tf.train.Coordinator()
threads = tf.train.start_queue_runners(sess=sess, coord=coord)
for step in range(2001):
    x_batch, y_batch = sess.run([train_x_batch, train_y_batch])
    cost_val, hy_val, _ = sess.run(
        [cost, hypothesis, train], feed_dict={X: x_batch, Y: y_batch})
    if step % 10 == 0:
        print(step, "Cost: ", cost_val, "\nPrediction:\n", hy_val)
coord.request_stop()
coord.join(threads)
